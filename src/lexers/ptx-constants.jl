const types = [
    "s8",
    "s16",
    "s32",
    "s64",
    "u8",
    "u16,",
    "u32",
    "u64",
    "f16",
    "f16x2",
    "f32",
    "f64",
    "b8",
    "b16",
    "b32",
    "b64",
    "pred",
]

const directives = [
    "address_size",
    "align",
    "branchtargets",
    "callprototype",
    "calltargets",
    "const",
    "entry",
    "extern",
    "file",
    "func",
    "global",
    "loc",
    "local",
    "maxnctapersm",
    "maxnreg",
    "maxntid",
    "minnctapersm",
    "param",
    "pragma",
    "reg",
    "reqntid",
    "section",
    "shared",
    "sreg",
    "target",
    "tex",
    "version",
    "visible",
    "weak",
]

const predefined_identifiers = [
    "%clock",
    "%clock64",
    "%ctaid",
    "%envreg<32>",
    "%gridid",
    "%laneid",
    "%lanemask_eq",
    "%lanemask_ge",
    "%lanemask_gt",
    "%lanemask_le",
    "%lanemask_lt",
    "%nctaid",
    "%nsmid",
    "%ntid",
    "%nwarpid",
    "%pm0",
    "%pm1",
    "%pm2",
    "%pm3",
    "%pm4",
    "%pm5",
    "%pm6",
    "%pm7",
    "%smid",
    "%tid",
    "%warpid",
    "WARP_SZ",
]

const ptx_instructions = [
    "abs",
    "activemask",
    "add",
    "addc",
    "alloca",
    "and",
    "applypriority",
    "atom",
    "bar",
    "barrier",
    "bfe",
    "bfi",
    "bfind",
    "bmsk",
    "bra",
    "brev",
    "brkpt",
    "brx",
    "call",
    "clz",
    "cnot",
    "copysign",
    "cos",
    "cp",
    "createpolicy",
    "cvt",
    "cvta",
    "discard",
    "div",
    "dp2a",
    "dp4a",
    "ex2",
    "exit",
    "fence",
    "fma",
    "fns",
    "isspacep",
    "istypep",
    "ld",
    "ldmatrix",
    "ldu",
    "lg2",
    "lop3",
    "mad",
    "mad24",
    "madc",
    "match",
    "max",
    "mbarrier",
    "membar",
    "min",
    "mma",
    "mov",
    "mul",
    "mul24",
    "nanosleep",
    "neg",
    "not",
    "or",
    "pmevent",
    "popc",
    "prefetch",
    "prefetchu",
    "prmt",
    "rcp",
    "red",
    "redux",
    "rem",
    "ret",
    "rsqrt",
    "sad",
    "selp",
    "set",
    "setp",
    "shf",
    "shfl",
    "shl",
    "shr",
    "sin",
    "slct",
    "sqrt",
    "st",
    "stackrestore",
    "stacksave",
    "sub",
    "subc",
    "suld",
    "suq",
    "sured",
    "sust",
    "szext",
    "tanh",
    "testp",
    "tex",
    "tld4",
    "trap",
    "txq",
    "vabsdiff",
    "vabsdiff2",
    "vabsdiff4",
    "vadd",
    "vadd2",
    "vadd4",
    "vavrg2",
    "vavrg4",
    "vmad",
    "vmax",
    "vmax2",
    "vmax4",
    "vmin",
    "vmin2",
    "vmin4",
    "vote",
    "vset",
    "vset2",
    "vset4",
    "vshl",
    "vshr",
    "vsub",
    "vsub2",
    "vsub4",
    "wmma",
    "xor",
	"uni"
]

operators_comparison_sint = ["eq", "ne", "lt", "le", "gt", "ge"]
operators_comparison_uint = ["eq", "ne", "lo", "ls", "hi", "hs"]
operators_comparison_bit = ["eq", "ne"]

operators_comparison_float = ["eq", "ne", "lt", "le", "gt", "ge"]
operators_comparison_nanfloat = ["equ", "neu", "ltu", "leu", "gtu", "geu"]
operators_comparison_nan = ["num", "nan"]

modifiers_int = ["rni", "rzi", "rmi", "rpi"]
modifiers_float = ["rn", "rna", "rz", "rm", "rp"]
modifiers = sort(unique([modifiers_int..., modifiers_float...]))

state_spaces = ["reg", "sreg", "const", "global", "local", "param", "shared", "tex"]

const operators = sort(
    unique([
        operators_comparison_sint...,
        operators_comparison_uint...,
        operators_comparison_bit...,
        operators_comparison_float...,
        operators_comparison_nanfloat...,
        operators_comparison_nan...,
        modifiers...,
        state_spaces...,
        types...,
    ]),

r_followsym = "[a-zA-Z0-9_\$]"
r_identifier = "(?:[a-zA-Z]$r_followsym*)|(?:[_\$%]$r_followsym+)"

r_hex = "0[xX][A-F]+U?"
r_octal = "0[0-8]+U?"
r_binary = "0[bB][01]+U?"
r_decimal = "[0-9]+(?:\\.[0-9]+)?U?"
r_float = "0[fF]{hexdigit}{8}"
r_double = "0[dD]{hexdigit}{16}"

r_number = join(
    map(x -> "(?:" * x * ")", [r_hex, r_octal, r_binary, r_decimal, r_float, r_double]),
    "|",
)
